
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}



http {
    include       mime.types;
    default_type  application/octet-stream;

    # $remote_addr  #记录访问网站的客户端地址
    # $remote_user  #远程客户端用户名
    # $time_local  #记录访问时间与时区
    # $request  #用户的http请求起始行信息
    # $status  #http状态码, 记录请求返回的状态码, 例如：200、301、404等
    # $body_bytes_sent  #服务器发送给客户端的响应body字节数
    # $http_referer  #记录此次请求是从哪个连接访问过来的, 可以根据该参数进行防盗链设置。
    # $http_user_agent  #记录客户端访问信息, 例如：浏览器、手机客户端等
    # $http_x_forwarded_for  #当前端有代理服务器时, 设置web节点记录客户端地址的配置, 此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置

    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  logs/access.log  main;
    sendfile        on;
    # tcp_nopush     on;

    # keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    # 小于 2k 就尽量不要压缩
    # gzip_min_length 2k;
    # 1~10 压缩的级别
    # gzip_comp_level 2;
    # 只对以下文件压缩: text/html 是默认值
    # gzip_types text/html text/plain application/x-javascript text/css application/xml

    upstream LOAD_BALANCE_SERVER_NAME{
        [ip_hash/fair;]
        server 101.132.45.28:8080 weight=10;
        server 101.37.174.197:8080 weight=1;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        # LOAD_BALANCE
        location / {
            #需要转发请求的服务器  负载均衡也是如此配置
            proxy_pass   LOAD_BALANCE_SERVER_NAME;

            #Proxy Settings
            #是否跳转
            proxy_redirect     off;
            #请求要转发的host
            proxy_set_header   Host             $host;
            #请求的远程地址 这些在浏览器的header都可看, 不一一解释
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_max_temp_file_size 0;
            #连接前面的服务器超时时间
            proxy_connect_timeout      90;
            #请求转发数据报文的超时时间
            proxy_send_timeout         90;
            #读取超时时间
            proxy_read_timeout         90;
            # 缓冲区的大小
            proxy_buffer_size          4k;
            proxy_buffers              4 32k;
            #proxy_buffers缓冲区, 网页平均在32k以下的
            proxy_busy_buffers_size    64k;
            #高负荷下缓冲大小(proxy_buffers*2)
            proxy_temp_file_write_size 64k;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        location ~ \.php$ {
           proxy_pass   http://127.0.0.1;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ /image/ {
           root           html;
           autoindex      on;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    server {
       listen       8000;
       listen       somename:8080;
       server_name  somename  alias  another.alias;

       location / {
           root   html;
           index  index.html index.htm;
       }
    }


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
